"
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


np.random.seed(0)
X = np.linspace(0, 5, 100).reshape(-1, 1)
Y = 2 * np.sin(X) + np.random.normal(0, 0.5, size=X.shape)


X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)


def fit_polynomial(X_train, Y_train, X_test, Y_test, degree):
    poly = PolynomialFeatures(degree=degree)
    X_train_poly = poly.fit_transform(X_train)
    X_test_poly = poly.transform(X_test)

    model = LinearRegression()
    model.fit(X_train_poly, Y_train)

    train_rmse = np.sqrt(mean_squared_error(Y_train, model.predict(X_train_poly)))
    test_rmse = np.sqrt(mean_squared_error(Y_test, model.predict(X_test_poly)))

    return model, train_rmse, test_rmse


degrees = [1, 3, 10]
models = []
train_rmse_values = []
test_rmse_values = []

for degree in degrees:
    model, train_rmse, test_rmse = fit_polynomial(X_train, Y_train, X_test, Y_test, degree)
    models.append(model)
    train_rmse_values.append(train_rmse)
    test_rmse_values.append(test_rmse)


plt.figure(figsize=(10, 6))
plt.scatter(X_train, Y_train, color='blue', label='Training Data')
plt.scatter(X_test, Y_test, color='green', label='Testing Data')

x_values = np.linspace(0, 5, 100).reshape(-1, 1)
for i, model in enumerate(models):
    y_values = model.predict(PolynomialFeatures(degree=degrees[i]).fit_transform(x_values))
    plt.plot(x_values, y_values, label=f'Degree {degrees[i]}')


plt.title('Polynomial Regression with Different Degrees')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()"
